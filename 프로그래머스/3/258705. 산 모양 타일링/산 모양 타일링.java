import java.util.*;

class Solution {
    static int mod = 10007;
    public int solution(int n, int[] tops) {
        // dp의 2번째 칼럼은 이전 모형에서 마지막 삼각형이 채워지지 않았다고 가정 (마름모로 채워지는 경우의수)
        int[][] dp = new int[n][2];
        
        if(tops[0] == 1) {
            dp[0][0] = 4;
            dp[0][1] = 3;
        } else {
            dp[0][0] = 3;
            dp[0][1] = 2;
        }
        
        if(n == 1) {
            return dp[0][0] + dp[0][1];
        }
        
        for(int i = 1; i < n; i++) {
            if(i == n-1) {
                if(tops[i] == 0) {
                    dp[i][0] += dp[i-1][1];
                    dp[i][0] += dp[i-1][0] * 2;
                } else {
                    dp[i][0] += dp[i-1][1];
                    dp[i][0] += dp[i-1][0] * 3;
                }
                dp[i][0] %= mod;
                break;
            }
            if(tops[i] == 0) {
                dp[i][0] += (dp[i-1][0] * 2 + dp[i-1][1]);
                dp[i][0] %= mod;
                dp[i][1] += (dp[i-1][0] + dp[i-1][1]);
                dp[i][1] %= mod;
            } else {
                dp[i][0] += (dp[i-1][0] * 3 + dp[i-1][1]);
                dp[i][0] %= mod;
                dp[i][1] += (dp[i-1][0] * 2 + dp[i-1][1]);
                dp[i][1] %= mod;
            }
            
        }

        return dp[n-1][0];
        // n = 1이고 위에 안붙음
        // 삼각형 3개, 마름모 1개 삼각형 1개 총 세가지 경우
        
        // n = 1이고, 위에 하나 더붙으면
        // 삼각형 4개, 마름모 1개, 삼각형 2개  총 네가지 경우
        
        // n = 2이고 위에 안붙음 (3가지경우)
        // n = 1일때 마지막부분이 채워질 경우 -> 삼각형 2개, 마름모 1개 총 2가지 경우
        // n = 1일때 끝부분과 합쳐서 마름모 1개, 삼각형 1개 -> 1가지 경우
        
        // n = 2이고 위에 붙음 (4가지경우))
        // n = 1일때 마지막 부분이 삼각형일 경우 -> 삼각형 3개, 마름모1개 삼각형1개 3가지경우
        // n = 1일때 끝부분과 합쳐서 마름모 1개 -> 삼각형 2개 강제 총 1가지경우
    }
}